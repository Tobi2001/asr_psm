#include "inference/model/foreground/ocm/shape/HierarchicalShapeModel.h"

namespace ProbabilisticSceneRecognition {
 
  HierarchicalShapeModel::HierarchicalShapeModel()
  {
  }
  
  HierarchicalShapeModel::~HierarchicalShapeModel()
  {
  }
  
  void HierarchicalShapeModel::load(boost::property_tree::ptree& pPt)
  {
    // Load the volume of the space we're working in. It is required for the uniform distribution.
    mWorkspaceVolume = pPt.get<double>("shape.root.<xmlattr>.volume");
    
    // Load the childs of the root node.
    BOOST_FOREACH(boost::property_tree::ptree::value_type &v, pPt.get_child("shape.root"))
    {
      // Only access the 'child' child nodes.
      if(!std::strcmp(v.first.c_str(), "child"))
	mChildren.push_back(HierarchicalShapeModelNode(v.second));
    }
  }
  
  void HierarchicalShapeModel::handleSceneGraph(const boost::shared_ptr<const asr_msgs::AsrSceneGraph>& pSceneGraph)
  {
    // Determine the AsrNode that contains observations for this scene object.
    for(asr_msgs::AsrNode node : pSceneGraph->scene_elements)
    {	
      // The type of the first observation will be the type of this primary scene object.
      // We assume here that all obserations are of the same type.
      std::string type = node.track[0].type;
      
      // Get the name of this primary scene object.
      std::string sceneObjectName = mVisualizer->getSceneObjectName();
      
      // Check, if this AsrNode contains observations for this scene object.
      if(sceneObjectName.compare(type) == 0)
      {
	// Debug message.
	ROS_INFO_STREAM("Raw data for primary scene object'" << sceneObjectName << "' found.");
	
	// Forward scene graph to shape nodes.
	for(unsigned int i = 0; i < mChildren.size(); i++)
	  mChildren[i].handleSceneGraph(node, pSceneGraph);
	
	// There's only one AsrNode per object in a single scene graph.
	break;
      }
    }
  }
  
  void HierarchicalShapeModel::initializeVisualizer(boost::shared_ptr<Visualization::ProbabilisticPrimarySceneObjectVisualization> mSuperior)
  {
    // Store a copy of the primary scene object visualizer.
    mVisualizer = mSuperior;
    
    // Forward visualizer to the child nodes representing the secondary scene objects.
    for(unsigned int i = 0; i < mChildren.size(); i++)
      mChildren[i].initializeVisualizer(mSuperior);
  }
  
  double HierarchicalShapeModel::calculateProbabilityForHypothesis(std::vector<asr_msgs::AsrObject> pEvidenceList, std::vector<unsigned int> pAssignments)
  {
    double result = 1.0;

    // If no part was assigned to the root node, we don't need to continue (because the model doesn't allow cases like this).
    // Otherwise go down the rabbit hole and see what you'll find!
    if(pAssignments[0] > 0)
    {
      
      // This helper variable keeps track of the slot we're currently on. It will be given via reference to the nodes.
      // We have a tree structure and do a iteration similar to deep search here to 'serialize the tree'.
      unsigned int slotId = 0;
      
      // Converts the AsrObject assigned to this slot into the Pose data structure.
      // Subtract one from the assignment, because the first evidence is stored at position zero.
      mAbsolutePose.reset(new ResourcesForPsm::Pose(pEvidenceList[pAssignments[0] - 1]));
      
      // Evaluate evidence for root node under uniform distribution (FOR EVERY DIMENSION. Could only be done, it a root object was assigned to the root node.
      // THIS IS NECESSARY! When we have only one object, a scene containing it and a background scene,
      // then the probabilities MUST BE 50/50 (of course assumed that both scenes only consider shape)!
      result *= 1.0 / (mWorkspaceVolume * 2.0 * pow(M_PI, 2.0));
      
      // Iterate over all children, assign the given evidence to them and evaluate
      BOOST_FOREACH(HierarchicalShapeModelNode child, mChildren)
      {	
	// Update the transformation from world coordinates to parent coordinates.
	child.setAbsoluteParentPose(mAbsolutePose);
	
	// If zero-object was assigned to child, continue iterating down the tree to set the right slot id,
	// but don't use the probabilities based on the occluded subtree.
	result *= child.calculateProbabilityForHypothesis(pEvidenceList, pAssignments, slotId, pAssignments[0] == 0);
      }
      
      // Forward position of this primary scene object to visualizer.
      mVisualizer->setBestPoseCandidate(mAbsolutePose);
    } else {
      // A hypothesis without an assigned root object is invalid and will therefore be scored with the impossible event.
      result = 0.0;
    }
    return result;
  }
  
  void HierarchicalShapeModel::visualize(std::vector<asr_msgs::AsrObject> pEvidenceList)
  {
    // Get the name of the primary scene object.
    std::string name = mVisualizer->getSceneObjectName();
    
    // Try to find evidence for this scene object.
    for(unsigned int i = 0; i < pEvidenceList.size(); i++)
    {
      // Is this evidence for this scene object?
      if(name.compare(pEvidenceList[i].type) == 0)
      {
	// Extract pose of the object.
	mAbsolutePose.reset(new ResourcesForPsm::Pose(pEvidenceList[i]));
	
	// Forward the absolute pose of the primary scene object to the visualizer.
	mVisualizer->setPose(mAbsolutePose);
	
	// Forward the pose of this node as parent node pose to the child nodes.
	for(unsigned int i = 0; i < mChildren.size(); i++)
	  mChildren[i].setAbsoluteParentPose(mAbsolutePose);
      }
    }
    
    // Forward visualization command to the child nodes representing the secondary scene objects.
    for(unsigned int i = 0; i < mChildren.size(); i++)
      mChildren[i].visualize(pEvidenceList);
  }
  
  unsigned int HierarchicalShapeModel::getNumberOfNodes()
  {
    unsigned int result = 1;
    
    // Let the children of this node count their children.
    BOOST_FOREACH(HierarchicalShapeModelNode child, mChildren)
    {
      result += child.getNumberOfNodes();
    }
    return result;
  }
  
}