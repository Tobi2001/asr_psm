#Parameters for combinatorial optimization used in generating scene object relation graphs.

#optimization parameters:
optimization_algorithm: HillClimbing #type of optimization algorithm to use. from "HillClimbing", "RecordHunt", "SimulatedAnnealing"
starting_topologies_type: BestStarOrFullyMeshed #type of starting topology to use. from "BestStarOrFullyMeshed", "Random"
number_of_starting_topologies: 1 #number of topologies to start separate optimization runs from.

#neighbourhood function parameters:
neighbourhood_function: TopologyManager #type of the neighbourhood function to use. no other types available
remove_relations: true #whether to use removal of relations as operation in neighbour generation.		
swap_relations: true #whether to use swapping of relations as operation in neighbour generation.
maximum_neighbour_count: 100 #maximum number of neighbours to select in each step.

#cost function parameters:
cost_function: WeightedSum #type of the cost function to use. no other types available.
false_positives_weight: 5 #the weight to give the number of false positives in the weighted sum.
avg_recognition_time_weight: 1 #the weight to give the average recognition runtime in the weighted sum.
false_negatives_weight: 5 #the weight to give the number of false negatives in the weighted sum.

#test set generator parameters:
test_set_generator_type: relative #type of test set generation to use. from "absolute", "relative", "reference".
test_set_count: 1000 #number of test sets to use to validate topologies with.
object_missing_in_test_set_probability: 0 #probability with which an object does not appear in a test set. set to 0 to have all objects appear in each test set
recognition_threshold: 1.0e-04 #threshold above which a relation is considered fulfilled. scene threshold, above which scenes are recognized: pow(recognition_threshold,objects)
valid_test_set_db_filename: /home/SMBAD/students/nikolai/catkin_ws/src/psm_evaluation/performanceTestRessources/TestSets/validTestSets_demoRecording_5_400.sqlite
#database file to load the valid test sets from. New test sets are created if this is set to ''.
invalid_test_set_db_filename: /home/SMBAD/students/nikolai/catkin_ws/src/psm_evaluation/performanceTestRessources/TestSets/invalidTestSets_demoRecording_5_400.sqlite
#database file to load the invalid test sets from. New test sets are created if this is set to ''.
loaded_test_set_count: 1000 # how many test sets loaded from the database to use at first. Reduced to test_set_count later, but since some loaded sets may be misclassified and removed, it can be useful to load more than test_set_count (loaded_test_set_count should be bigger than or equal to test_set_count for this reason).
write_valid_test_sets_filename: ''
#/home/SMBAD/students/nikolai/catkin_ws/src/psm_evaluation/new_testsets/validTestSets_experiment_2_part_1_and_2_abs_nn.sqlite #database file to write newly created valid testsets to. Test sets are not written if they were loaded from files above or this parameter is set to ''.
write_invalid_test_sets_filename: ''
#/home/SMBAD/students/nikolai/catkin_ws/src/psm_evaluation/new_testsets/invalidTestSets_experiment_2_part_1_and_2_abs_nn.sqlite #database file to write newly created invalid testsets to. Test sets are not written if they were loaded from files above or this parameter is set to ''.

#miscellaneous parameters:
conditional_probability_algorithm: minimum #algorithm used to determine probabilities depending on multiple parents.#from "minimum", "multiplied", "root_of_multiplied", "average"  
revisit_topologies: true #whether to revisit topologies already seen in this optimization run.
flexible_recognition_threshold: false #when test sets are loaded from a file, set this to true to select the recognition threshold based on the test sets.
quit_after_test_set_evaluation: false #whether to end the program after test set evaluation and not perform combinatorial optimization. Useful when looking for a recognition threshold. Can also be used to compare against test sets generated by another program and adjust the model parameters accordingly.
get_worst_star_topology: false #whether to only compare the star topologies and return the worst in terms of cost. For testing purposes.

#hill climbing parameters, optional if other optimization algorithm is used:
hill_climbing_random_walk_probability: 0 #probability with which a random walk is performed.
hill_climbing_random_restart_probability: 0.2 #probability with which a random restart is performed.

#record hunt parameters, optional if other optimization algorithm is used:
record_hunt_initial_acceptable_cost_delta: 0.02 #initial delta for acceptable cost.
record_hunt_cost_delta_decrease_factor: 0.01 #factor to decrease the acceptance delta by.

#simulated annealing parameters, optional if other optimization algorithm is used:
simulated_annealing_start_temperature: 1 #temperature to start at.
simulated_annealing_end_temperature: 0.005 #temperature to terminate at.
simulated_annealing_repetitions_before_update: 8 #repetitions of comparison before decreasing temperature.
simulated_annealing_temperature_factor: 0.9 #factor by which the temperature changes.

#output parameters:
xml_output: file #output target for the partial PSMs learned on intermediate topologies. from "none", "screen", "file"
xml_file_path: /home/SMBAD/students/nikolai/catkin_ws/src/ilcasRosFull/perception/scene_recognition/asr_psm/data/  #path to write models to. optional if xml_output is not set to "file"
optimization_history_output: svg #output target for the history of the last optimization run. from "none", "screen", "txt", "svg"
optimization_history_file_path: /home/SMBAD/students/nikolai/catkin_ws/src/ilcasRosFull/perception/scene_recognition/asr_psm/data/ #path to write the history file to. optional if optimization_history_output is not set to "txt" or "svg"
create_runtime_log: false #whether to write a log of the runtimes to file
log_file_name: /home/SMBAD/students/nikolai/catkin_ws/src/ilcasRosFull/perception/scene_recognition/asr_psm/data/runtime_log.csv #full name of the .csv file to write log to. optional if create_runtime_log is false.
visualize_inference: true #whether to visualize intermediate inference runs